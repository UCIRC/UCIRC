/*
ConfigurationReader
File meant for: 
->Storing the Configuration of a device
->Loading Devices and Streams from a Configuration File
Reason this file exists:
->Redundancy
-->Insures ultiple paths of device connection
->More Informative Connection process
-->Allows for control of device/stream parameters
*/

#include <PvSampleUtils.h>
#include <PvDevice.h>
#include <PvDeviceGEV.h>
#include <PvStream.h>
#include <PvStreamGEV.h>
#include <PvConfigurationWriter.h>
#include <PvConfigurationReader.h>
#include <PvResult.h>


//PV_INIT_SIGNAL_HANDLER();

//FileName of the Config File
#define CONFIG_FILE ( "lib/Confifuration.pvxml" )
#define CAMERA1_CONFIGURATION_TAG ( "Camera1" )
#define CAMERA2_CONFIGURATION_TAG ( "Camera2" )
#define STREAM1_CONFIGURAITON_TAG ( "Stream1" )
#define STREAM2_CONFIGURATION_TAG ( "Stream2" )
#define GENERAL_CONFIGURATION_TAG ( "GeneralParams" )

//  Does so with some sort of ConnectionID
//  ->IP
//	->MAV
//  ->etc.
//  Returns a boolean to indicate Success/Failure

//bool camera controls which config file to save the device information to
//True is for the first camera, false for the second
//Returns 1 if succesful, 0 if fails to store config
int StoreConfiguration( PvDevice *aDevice, PvStream *aStream, bool camera )
{
    PvConfigurationWriter lWriter;
	PvResult lResult;
	const PvString target_device;
	const PvString target_stream;
	if ( camera ){
		target_device = CAMERA1_CONFIGURATION_TAG;
		target_stream = STREAM1_CONFIGURATION_TAG;
		cout << "Saving Device and Stream to Camera1 and Stream2 properties" << endl;
	}

	else {
		target_device = CAMERA2_CONFIGURATION_TAG;
		target_stream = STREAM2_CONFIGURATION_TAG;
		cout << "Saving Device and Stream to Camera2 and Stream2 properties" << endl;
	}

	//Store with a PvDevice
	lResult = lWriter.Store( aDevice, target_device );
	if ( !lResult.IsOK() ){
		cout << "Failed to store Device configuration" << endl;
		return 0;
	}
    // Store with a PvStream
    lResult = lWriter.Store( aStream, target_stream );
	if ( !lResult.IsOK() ){
		cout << "Failed to store Steam configuration" << endl;
		return 0;
	}
	
	lResult = lWriter.Save( CONFIG_FILE );
	if ( !lResult.IsOK () ){
		cout << "Failed to save configuration information to Configuration File" << endl;
		return 0;
	}

	return 1;
	
}

/*
Uses the Congiration file defined above to:
->Restore a connection to a device
->Verify if the connection is succesful
->Returns 1 on success, 0 on failure
*/

int RestoreConfiguration( PvDevice *aDevice, PvStream *aStream, bool camera )
{
	PvResult lResult;
    PvConfigurationReader lReader;
 
	const PvString target_device;
	const PvString target_stream;
	if ( camera ){
		target_device = CAMERA1_CONFIGURATION_TAG;
		target_stream = STREAM1_CONFIGURATION_TAG;
		cout << "Restoring Device from Camera1 and Stream1 properties" << endl;
	}

	else {
		target_device = CAMERA2_CONFIGURATION_TAG;
		target_stream = STREAM2_CONFIGURATION_TAG;
		cout << "Restoring Device from Camera2 and Stream2 properties" << endl;
	}
    
    cout << "Loading information and configuration" << endl;
	lResult = lReader.Load( CONFIG_FILE );
	if ( !lResult.IsOK() ){
		cout << "Could not open Config File" << endl;
		
	}

	cout << "Restoring Device..." << endl;
    // Attempt restoring as a GEV device
    PvResult lResult = lReader.Restore( target_device, aDevice );
    if ( !lResult.IsOK() )
    {
        cout << "Failed to restore device" << endl; 
		return 0;
    }

    cout << "Verify operation success..." << endl;
    if ( !lDevice->IsConnected() )
    {
		cout << "Failed to connect to Device" << endl;
        return 0;
    }

	cout << "Connected to Device!" << endl; 

	cout << "Restoring Stream..." << endl;
	
    PvResult lResult = lReader.Restore( target_stream , aStream );
    if ( !lResult.IsOK() )
    {
        cout << "Failed to Restore Stream" << endl;
		return 0;
    }

    cout << "Verify operation success" << endl;
    if ( !lStream->IsOpen() )
    {
    	cout << "Failed to open Stream" << endl;
	    return 0;
    }
	
	cout << "Restored Stream!" << endl;

    return 1;
}


